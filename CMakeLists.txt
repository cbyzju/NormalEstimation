cmake_minimum_required(VERSION 2.8)
set(PROJECT_NAME normalEstimation)
project(${PROJECT_NAME})

include(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
if(COMPILER_SUPPORTS_CXX11)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
   add_definitions(-DCOMPILEDWITHC11)
   message(STATUS "Using flag -std=c++11.")
elseif(COMPILER_SUPPORTS_CXX0X)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
   add_definitions(-DCOMPILEDWITHC0X)
   message(STATUS "Using flag -std=c++0x.")
else()
   message(FATAL_ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
endif()

if(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
endif()
MESSAGE(STATUS "BUILD TYPE:" ${CMAKE_BUILD_TYPE})

include(FindOpenMP)
if(OPENMP_FOUND)
	MESSAGE(STATUS "OpenMP found: " TRUE)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()
 
find_package(PCL REQUIRED) 
include_directories(${PCL_INCLUDE_DIRS})
link_directories(${PCL_LIBRARY_DIRS})

set(EIGEN_INCLUDE_DIRS  E:/windows/eigen-3.3.4)
include_directories(${EIGEN_INCLUDE_DIRS})

add_executable(${PROJECT_NAME} main.cpp normalEstimation.cpp normalEstimation.h nanoflann.hpp nanoflann.hpp timer.cpp timer.h)
target_link_libraries(${PROJECT_NAME} ${PCL_LIBRARIES})
